{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "d409c3b5-e992-48ee-98e6-b94633c31767",
   "metadata": {},
   "outputs": [],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import altair as alt\n",
    "\n",
    "# --- Page setup ---\n",
    "st.set_page_config(page_title=\"StatsBomb Touch & OBV Analysis\", layout=\"wide\")\n",
    "\n",
    "st.title(\"⚽ StatsBomb Touch & OBV Analysis Dashboard\")\n",
    "st.markdown(\"\"\"\n",
    "Explore player performance across competitions using **Touches per 90** and **OBV metrics**.  \n",
    "Use the filters on the sidebar to select competitions, positions, teams, ages, and usage.\n",
    "\"\"\")\n",
    "\n",
    "# --- Load data ---\n",
    "@st.cache_data\n",
    "def load_data():\n",
    "    return pd.read_excel(\"touch_analysis.xlsx\")\n",
    "\n",
    "df = load_data()\n",
    "\n",
    "# --- Sidebar filters ---\n",
    "with st.sidebar:\n",
    "    st.header(\"Filters\")\n",
    "    \n",
    "    competitions = st.multiselect(\n",
    "        \"Select Competitions\", sorted(df[\"Competition\"].dropna().unique()), default=None\n",
    "    )\n",
    "    positions = st.multiselect(\n",
    "        \"Select Positions\", sorted(df[\"Position\"].dropna().unique()), default=None\n",
    "    )\n",
    "    teams = st.multiselect(\n",
    "        \"Select Teams\", sorted(df[\"Team\"].dropna().unique()), default=None\n",
    "    )\n",
    "\n",
    "    # Age filter\n",
    "    min_age = int(df[\"Age\"].min())\n",
    "    max_age = int(df[\"Age\"].max())\n",
    "    age_range = st.slider(\"Select Age Range\", min_age, max_age, (min_age, max_age))\n",
    "\n",
    "    # Usage filter\n",
    "    min_usage = int(df[\"Usage\"].min())\n",
    "    max_usage = int(df[\"Usage\"].max())\n",
    "    usage_range = st.slider(\"Select Usage Range (%)\", min_usage, max_usage, (20, max_usage))\n",
    "\n",
    "# --- Apply filters ---\n",
    "filtered = df.copy()\n",
    "\n",
    "if competitions:\n",
    "    filtered = filtered[filtered[\"Competition\"].isin(competitions)]\n",
    "if positions:\n",
    "    filtered = filtered[filtered[\"Position\"].isin(positions)]\n",
    "if teams:\n",
    "    filtered = filtered[filtered[\"Team\"].isin(teams)]\n",
    "\n",
    "filtered = filtered[\n",
    "    (filtered[\"Age\"].between(age_range[0], age_range[1])) &\n",
    "    (filtered[\"Usage\"].between(usage_range[0], usage_range[1]))\n",
    "]\n",
    "\n",
    "# --- Key metrics ---\n",
    "st.subheader(\"Summary Statistics\")\n",
    "col1, col2, col3 = st.columns(3)\n",
    "col1.metric(\"Players\", len(filtered))\n",
    "col2.metric(\"Avg Touches per 90\", round(filtered[\"Touches per 90\"].mean(), 1))\n",
    "col3.metric(\"Avg OBV\", round(filtered[\"OBV\"].mean(), 3))\n",
    "\n",
    "# --- Main data table ---\n",
    "st.subheader(\"Player Data\")\n",
    "st.dataframe(\n",
    "    filtered[\n",
    "        [\n",
    "            \"Player Name\", \"Team\", \"Competition\", \"Position\", \"Age\", \"Usage\",\n",
    "            \"Touches per 90\", \"OBV Rank\", \"Pass OBV Rank\",\n",
    "            \"Dribble & Carry OBV Rank\", \"Shot OBV Rank\"\n",
    "        ]\n",
    "    ].sort_values(\"Touches per 90\", ascending=False),\n",
    "    use_container_width=True,\n",
    ")\n",
    "\n",
    "# --- Chart: Touches per 90 vs OBV ---\n",
    "st.subheader(\"Touches per 90 vs OBV Rank\")\n",
    "\n",
    "chart = (\n",
    "    alt.Chart(filtered)\n",
    "    .mark_circle(size=80, opacity=0.7)\n",
    "    .encode(\n",
    "        x=alt.X(\"Touches per 90\", title=\"Touches per 90\"),\n",
    "        y=alt.Y(\"OBV Rank\", title=\"OBV Rank (0–100)\"),\n",
    "        color=\"Position\",\n",
    "        tooltip=[\n",
    "            \"Player Name\", \"Team\", \"Competition\", \"Position\",\n",
    "            \"Touches per 90\", \"OBV\", \"OBV Rank\"\n",
    "        ],\n",
    "    )\n",
    "    .interactive()\n",
    ")\n",
    "\n",
    "st.altair_chart(chart, use_container_width=True)\n",
    "\n",
    "# --- Footer ---\n",
    "st.markdown(\"---\")\n",
    "st.caption(\"Built with ❤️ using Streamlit and StatsBomb data.\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
